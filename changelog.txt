v16.0: El Auditor - 05 de julio de 2025

**Auditoría y Corrección Integral del Sistema de Machine Learning:**
Se ha realizado una auditoría exhaustiva de todo el ciclo de vida de los datos de IA, desde su captura hasta su uso en el entrenamiento, resultando en correcciones críticas que alinean perfectamente el entorno de producción (JavaScript) con el de entrenamiento (Python).

- **CORREGIDO - Desfase Crítico de Entrenamiento-Servicio (Train-Serve Skew):**
  - **Causa Raíz:** La función de vectorización de datos en `LearningManager.js` no manejaba los datos faltantes de la misma manera que `train_model.py`, introduciendo `NaN`s y datos corruptos en producción que no existían en el entrenamiento.
  - **Solución:** Se ha refactorizado `_normalizeAndVectorize` en `LearningManager.js` para ser una réplica exacta de la lógica de Python, añadiendo valores por defecto seguros y garantizando una consistencia 1:1 entre ambos entornos.

- **CORREGIDO - Error Lógico en la Función de Pérdida del Entrenamiento:**
  - **Causa Raíz:** En `train_model.py`, la función de pérdida (`criterion`) que debía manejar el desequilibrio de clases se sobrescribía en cada iteración del bucle de entrenamiento con una versión que no utilizaba los pesos de clase calculados, haciendo el entrenamiento ineficaz.
  - **Solución:** Se ha eliminado la re-declaración de `criterion` dentro del bucle, asegurando que la función de pérdida con los pesos correctos se utilice durante todo el proceso de entrenamiento.

- **CORREGIDO - Incompatibilidad entre Arquitectura de Modelo y Función de Pérdida:**
  - **Causa Raíz:** El modelo en `train_model.py` tenía una capa `Sigmoid` final, pero la función de pérdida `BCEWithLogitsLoss` (necesaria para el manejo de pesos) espera "logits" brutos. Esto causaba un cálculo de error incorrecto.
  - **Solución:**
    1. Se ha eliminado la capa `nn.Sigmoid()` de la arquitectura del modelo en `train_model.py`.
    2. Se ha modificado la función `predict` en `LearningManager.js` para aplicar manualmente la función sigmoide al logit recibido del modelo, asegurando que la interpretación de la confianza sea matemáticamente correcta.

**Resultado:** El sistema de IA es ahora robusto, coherente y fiable. El modelo se entrena con datos limpios y representativos, y las predicciones en producción se interpretan correctamente, maximizando la efectividad de las decisiones potenciadas por IA.

---

HISTORIAL DE CAMBIOS - BOT FANTASMA

v14.1: El Sincronizador Preciso - 02 de julio de 2025

Mejora de Precisión Temporal:
NUEVO - Sincronizador de Tiempo Dinámico: Se ha implementado un sistema centralizado (`utils/TimeSyncManager.js`) que elimina el desfase de tiempo acumulado (latencia interna). El bot ahora calibra su reloj interno en tiempo real con cada pip recibido del bróker.
  - El `TCPConnector` alimenta al `TimeSyncManager` con los timestamps originales del bróker.
  - Todos los módulos críticos (`pip-worker`, `analysis-worker`, `Operator`) utilizan ahora un tiempo corregido y unificado, asegurando que las velas, las señales y las órdenes se basan en una línea de tiempo de alta precisión.
  - Se ha mejorado drásticamente la fiabilidad del `requestId` de las operaciones, garantizando un seguimiento correcto de los resultados.

Optimización de la Lógica de Decisión:
AJUSTE - Calibración de Filtros de Confianza: Se ha ajustado la severidad de los filtros de precisión en `ChannelWorker.js`.
  - La penalización por operar en mercados sin tendencia (filtro ADX) se ha reducido para evitar la "parálisis por perfección", permitiendo que el bot opere en condiciones estrictas pero realistas, en lugar de no operar nunca.

v13.0: El Estratega de Contexto - 01 de julio de 2025

Mejora de Precisión Estratégica: Se ha evolucionado el motor de análisis para que el bot no solo vea señales, sino que entienda el "contexto" del mercado antes de operar. Esta versión introduce tres nuevos filtros de precisión.

Inteligencia de Mercado (IndicatorEngine.js):
NUEVO - Detección de Régimen de Mercado: Se ha integrado el indicador ADX (Average Directional Index). El bot ahora puede diferenciar entre un mercado en tendencia y un mercado en rango (lateral).
NUEVO - Arsenal Chartist Expandido: Se ha añadido la detección del patrón de velas Hammer (Martillo). El sistema de validación de efectividad ahora también mide el rendimiento histórico de este nuevo patrón.

Lógica de Trading (ChannelWorker.js):
NUEVO - Filtro de Régimen (ADX): Las señales basadas en seguimiento de tendencia (como los cruces de SMA) son penalizadas fuertemente si el ADX indica que el mercado está en rango, evitando así las "trampas" de mercados laterales.
NUEVO - Filtro de Confluencia de Temporalidades: Una señal generada en una temporalidad corta (ej. 1m) ahora debe estar alineada con la tendencia de la temporalidad superior (ej. 5m). Si hay conflicto, la confianza de la señal se reduce, evitando luchar contra la "marea" principal del mercado.
Umbral de Confianza Elevado: Se ha aumentado el requisito mínimo de confianza para aprobar una operación, asegurando que solo las señales de más alta probabilidad sean ejecutadas.

v4.1.1: Estabilización y Corrección Crítica - 29 de junio de 2025

Corrección de Errores:
RESUELTO: SyntaxError: Unexpected end of input y SyntaxError: missing ) after argument list que impedían el inicio del bot.
Causa Raíz: Error de sintaxis en modules/IndicatorEngine.js (coma ilegal y archivo truncado).
Solución: Reconstrucción y validación completa de modules/IndicatorEngine.js para asegurar la integridad sintáctica.

Estabilidad del Sistema:
El bot ahora se inicializa y opera sin errores de compilación.v4.1: La Arquitectura Híbrida Definitiva (Python-Node.js)Cambio Arquitectónico Principal: Se ha migrado a una arquitectura de dos componentes para una estabilidad 24/7 sin precedentes.NUEVO harvester.py (Los Oídos): Un script de Python ultra-estable, basado en Playwright, cuya única misión es conectarse al navegador, interceptar los WebSockets y "cosechar" los datos del mercado (pip y candles-generated).Servidor TCP: El harvester.py sirve estos datos a través de un servidor TCP en localhost:8765.Refactorización de Node.js (El Cerebro y Brazo):Se ha eliminado puppeteer como dependencia para la lectura de datos, reduciendo drásticamente la complejidad y los puntos de fallo.NUEVO connectors/TCPConnector.js: Un cliente TCP robusto que se conecta al harvester.py para recibir el flujo de datos.ELIMINADO modules/pipReceiver.js: Obsoleto gracias al nuevo conector TCP.INTACTO: La lógica para inyectar trades (BrokerConnector, wsInterceptorMain) no ha sido alterada, manteniendo la capacidad de operar de forma segura.Lógica de Trading (Corrección Final y Definitiva):IndicatorEngine.js: Re-diseñado para ser verdaderamente Multi-Estratégico. Ahora mantiene un conjunto de indicadores SMA y RSI para cada temporalidad estratégica (1m, 5m, 15m) de forma independiente.ChannelWorker.js: Re-escrito para ser Multi-Disparo. La lógica de evaluación ahora se activa con CUALQUIER vela estratégica (1m, 5m, 15m) y busca la confirmación táctica en la capa de 5s. Esto alinea el bot con la estrategia real multi-temporalidad.v4.0: Estrategia de Doble Capa Táctica-EstratégicaMotor de Análisis (IndicatorEngine.js):Re-diseñado desde cero para implementar una estrategia de Doble Capa.Capa Estratégica: Usa velas de 1m (configurable) con SMAs y RSI para determinar la tendencia y las oportunidades a medio plazo.Capa Táctica: Usa velas de 5s con un RSI rápido para medir el momentum y confirmar el punto de entrada.Lógica de Trading (ChannelWorker.js):Re-escrito desde cero para reflejar la nueva estrategia.Disparo Estratégico: La evaluación de una posible operación SOLO se activa cuando se cierra una vela de la capa estratégica.Confirmación Táctica: Una oportunidad estratégica solo se convierte en una señal de trading si la capa táctica confirma que el momentum inmediato está alineado.Sistema de Velas:pip-worker.js: Actualizado a v2.0 (Multi-Temporalidad). Ahora es una "fábrica" que construye velas de 5s, 1m, 5m y 15m simultáneamente desde el mismo flujo de pips, alimentando ambas capas del IndicatorEngine.Arquitectura General:Se ha consolidado el flujo de datos para asegurar que las velas de todas las temporalidades lleguen correctamente al nuevo motor de análisis a través de los workers.Documentación:README.txt: Actualizado para reflejar la nueva arquitectura v4.0, el flujo de datos y la estructura del proyecto.changelog.txt: Creado para mantener un registro histórico de los cambios significativos.