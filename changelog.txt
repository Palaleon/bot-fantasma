# HISTORIAL DE CAMBIOS - BOT FANTASMA

## v4.1.1: Estabilización y Corrección Crítica

*   **Corrección de Errores:**
    *   **RESUELTO:** `SyntaxError: Unexpected end of input` y `SyntaxError: missing ) after argument list` que impedían el inicio del bot.
    *   **Causa Raíz:** Error de sintaxis en `modules/IndicatorEngine.js` (coma ilegal y archivo truncado).
    *   **Solución:** Reconstrucción y validación completa de `modules/IndicatorEngine.js` para asegurar la integridad sintáctica.

*   **Estabilidad del Sistema:**
    *   El bot ahora se inicializa y opera sin errores de compilación, permitiendo la conexión con el navegador, la intercepción de WebSockets y el procesamiento de datos del Harvester.

---

## v4.1: La Arquitectura Híbrida Definitiva (Python-Node.js)

*   **Cambio Arquitectónico Principal:** Se ha migrado a una arquitectura de dos componentes para una estabilidad 24/7 sin precedentes.
    *   **NUEVO `harvester.py` (Los Oídos):** Un script de Python ultra-estable, basado en Playwright, cuya única misión es conectarse al navegador, interceptar los WebSockets y "cosechar" los datos del mercado (`pip` y `candles-generated`).
    *   **Servidor TCP:** El `harvester.py` sirve estos datos a través de un servidor TCP en `localhost:8765`.
    *   **Refactorización de Node.js (El Cerebro y Brazo):**
        *   Se ha **eliminado `puppeteer`** como dependencia para la lectura de datos, reduciendo drásticamente la complejidad y los puntos de fallo.
        *   **NUEVO `connectors/TCPConnector.js`:** Un cliente TCP robusto que se conecta al `harvester.py` para recibir el flujo de datos.
        *   **ELIMINADO `modules/pipReceiver.js`:** Obsoleto gracias al nuevo conector TCP.
        *   **INTACTO:** La lógica para inyectar trades (`BrokerConnector`, `wsInterceptorMain`) no ha sido alterada, manteniendo la capacidad de operar de forma segura.

*   **Lógica de Trading (Corrección Final y Definitiva):**
    *   **`IndicatorEngine.js`:** Re-diseñado para ser verdaderamente **Multi-Estratégico**. Ahora mantiene un conjunto de indicadores SMA y RSI para cada temporalidad estratégica (`1m`, `5m`, `15m`) de forma independiente.
    *   **`ChannelWorker.js`:** Re-escrito para ser **Multi-Disparo**. La lógica de evaluación ahora se activa con CUALQUIER vela estratégica (`1m`, `5m`, `15m`) y busca la confirmación táctica en la capa de `5s`. Esto alinea el bot con la estrategia real multi-temporalidad.

---

## v4.0: Estrategia de Doble Capa Táctica-Estratégica

*   **Motor de Análisis (`IndicatorEngine.js`):**
    *   **Re-diseñado desde cero** para implementar una estrategia de **Doble Capa**.
    *   **Capa Estratégica:** Usa velas de `1m` (configurable) con SMAs y RSI para determinar la tendencia y las oportunidades a medio plazo.
    *   **Capa Táctica:** Usa velas de `5s` con un RSI rápido para medir el momentum y confirmar el punto de entrada.

*   **Lógica de Trading (`ChannelWorker.js`):**
    *   **Re-escrito desde cero** para reflejar la nueva estrategia.
    *   **Disparo Estratégico:** La evaluación de una posible operación **SOLO** se activa cuando se cierra una vela de la capa estratégica.
    *   **Confirmación Táctica:** Una oportunidad estratégica solo se convierte en una señal de trading si la capa táctica confirma que el momentum inmediato está alineado.

*   **Sistema de Velas:**
    *   **`pip-worker.js`:** Actualizado a v2.0 (Multi-Temporalidad). Ahora es una "fábrica" que construye velas de `5s`, `1m`, `5m` y `15m` simultáneamente desde el mismo flujo de pips, alimentando ambas capas del `IndicatorEngine`.

*   **Arquitectura General:**
    *   Se ha consolidado el flujo de datos para asegurar que las velas de todas las temporalidades lleguen correctamente al nuevo motor de análisis a través de los workers.

*   **Documentación:**
    *   **`README.txt`:** Actualizado para reflejar la nueva arquitectura v4.0, el flujo de datos y la estructura del proyecto.
    *   **`changelog.txt`:** Creado para mantener un registro histórico de los cambios significativos.

---