/*
================================================================================
||                          TRADING CHANNEL v1.0                              ||
||                    Pipeline Completo por Activo                            ||
================================================================================

PROP√ìSITO:
Encapsula TODO el pipeline de procesamiento para UN activo espec√≠fico:
CandleBuilder ‚Üí IndicatorEngine ‚Üí Humanizer ‚Üí Se√±al Final

ARQUITECTURA:
Cada TradingChannel es completamente independiente, manteniendo su propio:
- Estado de velas
- An√°lisis t√©cnico
- Reglas de humanizaci√≥n
- Historial de se√±ales

VENTAJAS:
1. Aislamiento total entre activos
2. Estado independiente (no hay interferencia)
3. F√°cil paralelizaci√≥n futura (Worker Threads)
4. M√©tricas granulares por activo
5. Configuraci√≥n espec√≠fica por tipo de activo

EVOLUCI√ìN:
- v1.0: Pipeline √∫nico con componentes existentes
- v1.1: Indicadores avanzados por activo
- v1.2: Machine Learning por canal
- v2.0: Worker Thread dedicado

================================================================================
*/

import { EventEmitter } from 'events';
import logger from '../utils/logger.js';
import IndicatorEngine from './IndicatorEngine.js';

class TradingChannel extends EventEmitter {
  constructor(assetName) {
    super();
    this.asset = assetName;
    // ... (mismas propiedades de estado y m√©tricas)
    this._initializePipeline();
    logger.info(`üì° TradingChannel [${this.asset}] v2.0 creado (simplificado)`);
  }

  _initializePipeline() {
    this.indicatorEngine = new IndicatorEngine(this.asset);
    this._connectPipeline();
    logger.info(`üîß Pipeline simplificado inicializado para [${this.asset}]`);
  }

  _connectPipeline() {
    // IndicatorEngine ‚Üí Salida del canal
    this.indicatorEngine.on('se√±alTecnica', (signal) => {
      this.metrics.signalsGenerated++;
      signal.channel = this.asset; // Adjuntar el nombre del canal
      this.emit('se√±alTecnicaCanal', signal); // Emitir hacia arriba
    });
  }

  processCandle(candle) {
    // logger.warn(`[DEBUG-AUDIT] TradingChannel [${this.asset}]: Recibida vela ${candle.timeframe}. Pasando a IndicatorEngine.`);
    this.indicatorEngine.analyzeCandle(candle);
  }

  // ... (resto de m√©todos de utilidad como getMetrics, stop, etc. sin la l√≥gica del Humanizer)
}

export default TradingChannel;
